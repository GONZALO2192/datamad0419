{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'aac_intakes_outcomes.csv'"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import json\n",
    "import requests\n",
    "Df='aac_intakes_outcomes.csv'\n",
    "\n",
    "def animal(mixed):\n",
    "    ani = pd.read_csv(Df, encoding='ISO/8859/1') \n",
    "    return mixed\n",
    "\n",
    "animal(Df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def mixed(x): \n",
    "    return 'mix' in x.lower() or '/' in x.lower()\n",
    "\n",
    "def x=\n",
    "ani['Mix'] = ani.breed.apply(mixed)\n",
    "    return mix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "#ani[['breed', 'Mix']].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def mix(t):\n",
    "    null_cols = ani.isnull().sum()\n",
    "    null_cols[null_cols > 0]\n",
    "    return t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def t(i) : \n",
    "  before = len(ani)\n",
    "  ani = ani.drop_duplicates()\n",
    "  after = len(ani)\n",
    "  return i\n",
    "#print('Number of duplicate records dropped: ', str(before - after))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def i(u):\n",
    "  ani.drop(['age_upon_outcome_age_group','age_upon_outcome','outcome_subtype','age_upon_outcome_(days)','intake_monthyear','time_in_shelter','outcome_monthyear','dob_monthyear',\n",
    "  'found_location','count','time_in_shelter','date_of_birth','age_upon_intake_age_group','intake_datetime','outcome_datetime','intake_hour','outcome_weekday','sex_upon_outcome','sex_upon_intake','age_upon_intake_(days)','outcome_hour','dob_month','dob_year','dob_monthyear','animal_id_intake'], axis='columns', inplace=True)\n",
    "  return u"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "def u(ñ):\n",
    "  ani = ani.drop(ani[ani['animal_type']=='Cat'].index)\n",
    "  ani = ani.drop(ani[ani['animal_type']=='Other'].index)\n",
    "  ani = ani.drop(ani[ani['animal_type']=='Bird'].index)\n",
    "  return ñ"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def ñ(p):\n",
    "  response = requests.get('https://dog.ceo/api/breeds/list')\n",
    "  data = pd.DataFrame(response.json())\n",
    "  return p\n",
    "\n",
    "\n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "def p(o) :  \n",
    "   ani['breed'] = ani['breed'].str.replace('Akita/Mastiff','akita').str.replace('Akita Mix','akita').str.replace('Anatol Shepherd/Akita','akita').str.replace('Akita/Labrador Retriever','akita').str.replace('Beagle Mix','beagle').str.replace('Beagle/Cairn Terrier','beagle').str.replace('Beagle/German Shepherd','beagle').str.replace('Beagle','beagle').str.replace('Beagle/Basset Hound','beagle').str.replace('Beagle/Labrador Retriever','beagle').str.replace('Beagle/Pug','beagle').str.replace('Beagle/Rat Terrier','beagle').str.replace('Beagle/Australian Cattle Dog','beagle').str.replace('Beagle/Parson Russell Terrier','beagle').str.replace('Beagle/Queensland Heeler','beagle').str.replace('Beagle/Chihuahua Longhair','beagle').str.replace('Beagle/American Staffordshire Terrier','beagle').str.replace('Beagle/Dachshund','beagle').str.replace('Beagle/Cocker Spaniel','beagle').str.replace('Beagle/Boxer','beagle').str.replace('Beagle/Jack Russell Terrier','beagle').str.replace('Beagle/Cavalier Span','beagle').str.replace('Beagle/Chinese Sharpei','beagle').str.replace('Beagle/Whippet','beagle').str.replace('Beagle/Pit Bull','beagle').str.replace('Beagle/Pointer','beagle').str.replace('Beagle/Cardigan Welsh Corgi','beagle').str.replace('Beagle/Staffordshire','beagle').str.replace('Beagle/Standard Poodle','beagle').str.replace('Beagle/Vizsla','beagle').str.replace('Beagle/Black Mouth Cur','beagle').str.replace('Beagle/Harrier','beagle').str.replace('Beagle/Pointer','beagle').str.replace('Beagle/Treeing Walker Coonhound','beagle').str.replace('Beagle/Pembroke Welsh Corgi','beagle').str.replace('Beagle/Australian Kelpie','beagle').str.replace('Beagle/Catahoula','beagle').str.replace('Beagle/Mastiff','beagle').str.replace('Beagle/Chinese Sharpei','beagle').str.replace('Beagle/Miniature Pinscher','beagle').str.replace('Boxer Mix','boxer').str.replace('Boxer/Beagle','boxer').str.replace('Boxer/Pit Bull','boxer').str.replace('Boxer','boxer').str.replace('Boxer/English Bulldog','boxer').str.replace('Boxer/Labrador Retriever','boxer').str.replace('Boxer/Staffordshire','boxer').str.replace('Boxer/Jack Russell Terrier','boxer').str.replace('Boxer/Greyhound','boxer').str.replace('Boxer/Redbone Hound','boxer').str.replace('Boxer/Catahoula','boxer').str.replace('Boxer/German Shepherd','boxer').str.replace('Boxer/Doberman Pinsch','boxer').str.replace('Boxer/American Bulldog','boxer').str.replace('Boxer/Rhod Ridgeback','boxer').str.replace('Boxer/Pointer','boxer').str.replace('Boxer/Cardigan Welsh Corgi','boxer').str.replace('Boxer/Neapolitan Mastiff','boxer').str.replace('Boxer/Queensland Heeler','boxer').str.replace('Boxer/Black Mouth Cur','boxer').str.replace('Boxer/American Staffordshire Terrier','boxer').str.replace('Boxer/Australian Cattle Dog','boxer').str.replace('Boxer/Boston Terrier','boxer').str.replace('Boxer/Great Dane','boxer').str.replace('Boxer/Staffordshire','boxer').str.replace('Boxer/Dogue De Bordeaux','boxer').str.replace('Boxer/Chinese Sharpei','boxer').str.replace('Boxer/Border Collie','boxer').str.replace('Boxer/Miniature Poodle','boxer').str.replace('Boxer/Bulldog','boxer').str.replace('Boxer/Akita','boxer').str.replace('Boxer/Harrier','boxer').str.replace('Boxer/Great Pyrenees','boxer').str.replace('Boxer/Bullmastiff','boxer').str.replace('American Bulldog Mix','bulldog').str.replace('English Bulldog','bulldog').str.replace('Bulldog/Pit Bull','bulldog').str.replace('English Bulldog Mix','bulldog').str.replace('American Bulldog','bulldog').str.replace('Old English Bulldog Mix','bulldog').str.replace('American Bulldog/Pit Bull','bulldog').str.replace('Bulldog/Australian Cattle Dog','bulldog').str.replace('American Bulldog/Pointer','bulldog').str.replace('English Bulldog/American Staffordshire Terrier','bulldog').str.replace('American Bulldog/Labrador Retriever','bulldog').str.replace('French Bulldog Mix','bulldog').str.replace('French Bulldog/Chihuahua Shorthair','bulldog').str.replace('English Bulldog/Cairn Terrier','bulldog').str.replace('American Bulldog/Blue Lacy','bulldog').str.replace('American Bulldog/American Staffordshire Terrier','bulldog').str.replace('English Bulldog/Dachshund','bulldog').str.replace('American Bulldog/Chinese Sharpei','bulldog').str.replace('Bulldog/Boston Terrier','bulldog').str.replace('American Bulldog/Boxer','bulldog').str.replace('English Bulldog/American Bulldog','bulldog').str.replace('English Bulldog/Staffordshire','bulldog').str.replace('English Bulldog/Staffordshire','bulldog').str.replace('French Bulldog/English Bulldog','bulldog').str.replace('French Bulldog/Pug','bulldog').str.replace('English Bulldog/Boxer','bulldog').str.replace('American Bulldog/Basset Hound','bulldog').str.replace('French Bulldog/Miniature Schnauzer','bulldog').str.replace('American Bulldog/Great Pyrenees','bulldog').str.replace('English Bulldog/Beagle','bulldog').str.replace('English Bulldog/Australian Cattle Dog','bulldog').str.replace('American Bulldog/Dalmatian','bulldog').str.replace('Chihuahua Shorthair/Basenji','chihuahua').str.replace('Chihuahua Shorthair','chihuahua').str.replace('Chihuahua Shorthair Mix','chihuahua').str.replace('Chihuahua Longhair Mix','chihuahua').str.replace('Chihuahua Longhair/Pekingese','chihuahua').str.replace('Chihuahua Shorthair/Rat Terrier','chihuahua').str.replace('Chihuahua Shorthair/Dachshund','chihuahua').str.replace('Chihuahua Shorthair/Wire Hair Fox Terrier','chihuahua').str.replace('Chihuahua Shorthair/Miniature Pinscher','chihuahua').str.replace('Chihuahua Longhair/Pomeranian','chihuahua').str.replace('Chihuahua Shorthair/Australian Cattle Dog','chihuahua').str.replace('Chihuahua Shorthair/Beagle','chihuahua').str.replace('Chihuahua Longhair','chihuahua').str.replace('Chihuahua Shorthair/Italian Greyhound','chihuahua').str.replace('Chihuahua Shorthair/Bichon Frise','chihuahua').str.replace('Chihuahua Shorthair/Pug','chihuahua').str.replace('Chihuahua Shorthair/Mexican Hairless','chihuahua').str.replace('Chihuahua Shorthair/Cardigan Welsh Corgi','chihuahua').str.replace('Chihuahua Longhair/Papillon','chihuahua').str.replace('Chihuahua Shorthair/Whippet','chihuahua').str.replace('Chihuahua Shorthair/Cardigan Welsh Corgi','chihuahua').str.replace('Chihuahua Shorthair/Jack Russell Terrier','chihuahua').str.replace('Chihuahua Shorthair/Cirneco','chihuahua').str.replace('Chihuahua Shorthair/Border Terrier','chihuahua') .str.replace('Chihuahua Shorthair/Swedish Vallhund','chihuahua').str.replace('Chihuahua Shorthair/Welsh Terrier','chihuahua').str.replace('Chihuahua Shorthair/Manchester Terrier','chihuahua').str.replace('Chihuahua Shorthair/Miniature Schnauzer','chihuahua').str.replace('Chihuahua Shorthair/Shiba Inu ','chihuahua').str.replace('Chihuahua Shorthair/Labrador Retriever','chihuahua') .str.replace('Chihuahua Shorthair/Italian Greyhound','chihuahua').str.replace('Chihuahua Shorthair/Norfolk Terrier','chihuahua').str.replace('Chihuahua Shorthair/Schipperke','chihuahua').str.replace('Chihuahua Shorthair/Shih Tzu','chihuahua').str.replace('Border Collie Mix','collie').str.replace('Border Collie','collie').str.replace('Border Collie/Catahoula','collie').str.replace('Border Collie/Chow Chow','collie').str.replace('Border Collie/Akita','collie').str.replace('Border Collie/Labrador Retriever','collie').str.replace('Border Collie/Boxer','collie').str.replace('Border Collie/Parson Russell Terrier','collie').str.replace('Border Collie/Bernese Mountain Dog','collie').str.replace('Border Collie/Miniature Pinscher','collie').str.replace('Border Collie/Australian Cattle Dog','collie').str.replace('Border Collie/Pointer','collie').str.replace('Border Collie/Mastiff','collie').str.replace('Border Collie/Pomeranian','collie').str.replace('Border Collie/Pit Bull','collie').str.replace('Border Collie/Anatol Shepherd','collie').str.replace('Dalmatian Mix','dalmatian').str.replace('Dalmatian/Basset Hound','dalmatian').str.replace('Dalmatian/Labrador Retriever','dalmatian').str.replace('Dalmatian/Pointer','dalmatian').str.replace('Dalmatian/Australian Cattle Dog','dalmatian').str.replace('Dalmatian/boxer','dalmatian').str.replace('Dalmatian/Pit Bull','dalmatian').str.replace('Dalmatian/Plott Hound','dalmatian').str.replace('Great Dane Mix','dane').str.replace('Great Dane/Labrador Retriever','dane').str.replace('Great Dane/Pit Bull','dane').str.replace('Great Dane/Mastiff','dane').str.replace('Great Dane/Anatol Shepherd','dane').str.replace('Great Dane/Staffordshire','dane').str.replace('Great Dane/Australian Cattle Dog','dane').str.replace('Great Dane/boxer','dane').str.replace('Great Dane/Pointer','dane').str.replace('Great Dane/boxer','dane').str.replace('Doberman Pinsch Mix','doberman').str.replace('Doberman Pinsch/German Shepherd','doberman').str.replace('Doberman Pinsch','doberman').str.replace('Doberman Pinsch/collie','doberman').str.replace('Doberman Pinsch/Pit Bull','doberman').str.replace('Doberman Pinsch/Labrador Retriever','doberman').str.replace('Doberman Pinsch/Australian Cattle Dog','doberman').str.replace('Doberman Pinsch/Vizsla','doberman').str.replace('Doberman Pinsch/Rottweiler','doberman').str.replace('Doberman Pinsch/Black/Tan Hound','doberman').str.replace('German Shepherd/Labrador Retriever','germanshepherd').str.replace('German Shepherd Mix','germanshepherd').str.replace('German Shepherd','germanshepherd').str.replace('German Shepherd/collie','germanshepherd').str.replace('German Shepherd/Siberian Husky','germanshepherd').str.replace('German Shepherd/Rottweiler','germanshepherd').str.replace('German Shepherd/Golden Retriever','germanshepherd').str.replace('German Shepherd/Chow Chow','germanshepherd').str.replace('German Shepherd/Akita','germanshepherd').str.replace('German Shepherd/Alaskan Husky','germanshepherd').str.replace('German Shepherd/Black/Tan Hound','germanshepherd').str.replace('German Shepherd/boxer','germanshepherd').str.replace('German Shepherd/Alaskan Malamute','germanshepherd').str.replace('German Shepherd/Pit Bull','germanshepherd')\n",
    "   ani['breed'] = ani['breed'].str.replace('German Shepherd/Cardigan Welsh Corgi','germanshepherd').str.replace('German Shepherd/Collie Rough','germanshepherd').str.replace('German Shepherd/Nova Scotia Duck Tolling Retriever','germanshepherd').str.replace('German Shepherd/Mastiff','germanshepherd').str.replace('German Shepherd/Collie Smooth','germanshepherd').str.replace('German Shepherd/Australian Cattle Dog','germanshepherd').str.replace('German Shepherd/Alaskan Malamute','germanshepherd').str.replace('German Shepherd/boxer','germanshepherd').str.replace('German Shepherd/Catahoula','germanshepherd').str.replace('German Shepherd/Redbone Hound','germanshepherd').str.replace('German Shepherd/Doberman Pinsch','germanshepherd').str.replace('German Shepherd/Great Pyrenees','germanshepherd').str.replace('German Shepherd/Swedish Vallhund','germanshepherd').str.replace('German Shepherd/Chinese Sharpei','germanshepherd').str.replace('German Shepherd/Pembroke Welsh Corgi','germanshepherd').str.replace('German Shepherd/Cardigan Welsh Corgi','germanshepherd').str.replace('German Shepherd/Anatol Shepherd','germanshepherd').str.replace('German Shepherd/Bull Terrier','germanshepherd').str.replace('German Shepherd/Australian Kelpie','germanshepherd').str.replace('German Shepherd/Black Mouth Cur','germanshepherd').str.replace('German Shepherd/Pembroke Welsh Corgi','germanshepherd').str.replace('Siberian Husky Mix','husky').str.replace('Siberian Husky/Labrador Retriever','husky').str.replace('Siberian Husky','husky').str.replace('Alaskan Husky Mix','husky').str.replace('Siberian Husky/German Shepherd','husky').str.replace('Siberian Husky/collie','husky').str.replace('Siberian Husky/German Shepherd','husky').str.replace('Siberian Husky/Australian Cattle Dog','husky').str.replace('Siberian Husky/German Shepherd','husky').str.replace('Siberian Husky/German Shepherd','husky')\n",
    "\n",
    "   return o\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "def o(l):\n",
    "    \n",
    "  list_breed=['bulldog','boxer','beagle','husky','akita','chihuahua','collie','dalmatian','dane','doberman','germanshepherd' ]\n",
    "  ani=ani[ani['breed'].isin(list_breed)]\n",
    "  return l"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "#set(ani['breed'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "#ani = ani.drop(ani[ani['perrete']==False].index)\n",
    "#ani.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "#display(ani)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "def l(t):\n",
    "  fotos=[]\n",
    "  for i in ani['breed']:\n",
    "        fotos.append(('https://dog.ceo/api/breed/{}/images/random').format(i))\n",
    "  return t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "#ani['fotos']=fotos\n",
    "#ani"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "def t(q) : \n",
    "  ani = ani.drop(ani[ani['outcome_type']=='Transfer'].index)\n",
    "  ani = ani.drop(ani[ani['outcome_type']=='Rto-Adopt'].index)\n",
    "  list(ani['outcome_type'])\n",
    "  ani['outcome_type'].value_counts()\n",
    "  return q\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "def q(v):\n",
    " ani = ani.rename(columns={'age_upon_outcome_(years)':'age_upon_outcome_years'\n",
    "                            })\n",
    " return v"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "def v(m):\n",
    "  ani['breed'].value_counts()\n",
    "  return m"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "def m(euta):\n",
    " ani_test=ani.drop(ani[ani['outcome_type']!='Euthanasia'].index)\n",
    " ani_test=ani_test.drop(ani_test[ani_test['age_upon_outcome_years']<1.0].index)\n",
    " ani_test['breed'].value_counts(1).round(2)*100\n",
    " return euta"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "#he calculado el porcentaje segun la raza de perros mayores de un año que han sufrido eutanasia siendo germanshepherd el que mas sufre esto"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "def euta(z):\n",
    " ani_test2=ani.drop(ani[ani['outcome_type']!='Euthanasia'].index)\n",
    " ani_test2=ani_test2.drop(ani_test2[ani_test2['age_upon_outcome_years']>1.0].index)\n",
    " ani_test2['breed'].value_counts(1).round(2)*100\n",
    " return z"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "#he calculado el porcentaje segun la raza de perros menores de un año que han sufrido eutanasia,la raza que mas sufre esto es el germanshpherd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "#low_variance = []\n",
    "\n",
    "#for col in ani._get_numeric_data():\n",
    "    #minimum = min(ani[col])\n",
    "    #ninety_perc = np.percentile(ani[col], 90)\n",
    "    #if ninety_perc == minimum:\n",
    "        #low_variance.append(col)\n",
    "#print(low_variance)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "def z(bins):\n",
    "    bins = [0,2,6,10,19]\n",
    "    edades = ['0-1', '2-5', '6-10', '10-19']\n",
    "    ani['bins'] = pd.cut(ani['age_upon_outcome_years'], bins ,labels=edades)\n",
    "    return bins\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "def bins(u):\n",
    " ani.drop(['animal_id_outcome','intake_condition','outcome_month','outcome_year','outcome_number','age_upon_intake','color','intake_type','age_upon_intake_(years)','intake_month','intake_year','intake_weekday','intake_number'], axis='columns', inplace=True)\n",
    " return u\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#ani_2 = ani.groupby(['breed','Edades']).agg({'Mix':'count'})\n",
    "#ani_2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
